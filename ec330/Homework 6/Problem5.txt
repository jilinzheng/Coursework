Name: Jilin Zheng
Last letter of last name for part b: g

main.cpp output:
The number of BU-IDs whose digits add to a number greater than 28: 109061
Number of valid dictionary words that don't end with last letter of last name: 1779241955
Longest palindrome: 11

Explanation:
a) I first look for the character 'U' in the data. Once I find an 'U', I read in the 8 characters that directly follow the 'U', and verify that they are all digits and add each digit to a running sum (for the instance of 'U'). If by the end of the 8 characters, I have verified that they are all digits and their sum is > 28, I add to my count, a running sum for the entire fiveA function that keeps track of how many BU-IDs satisfy the requirement.

b) I implemented a Trie that takes in all words in the dictionary that do NOT have the last letter of my last name. Then, I search through the BigData, saving all characters that are alphabetical to a 'currentWord' string. Then I search through my 'dictionaryTrie' for the currentWord, and if it exists, I increment a 'numValidWords' running sum that keeps track of how many words exist that match the letter requirement and are in the dictionary.

c) I referenced the source I linked in my .cpp file and implemented Manacher's Algorithm, primarily because the other methods I attempted were not efficient enough to find the longest palindrome in sufficient time. Manacher's Algorithm is capable of finding the longest palindrome in linear time, and is based around the left- and right-expansion of each character in the input string and verifying if the expansion is still a valid palindrome.