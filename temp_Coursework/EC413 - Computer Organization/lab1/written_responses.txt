Jilin Zheng Lab 1 Responses


3. Signed versus unsigned datatypes

3.1 uchar1 vs. schar1
uchar1 and schar1 have different outputs despite being assigned the same value because the former is unsigned and the latter is signed. 0xFF is 255 in decimal, which makes sense for uchar1 with a range from 0 to 255. schar1 ends up being -1 because it only has a range from -128 to 127, so any number above 127 overflows and wraps around to -128 and continues upwards.

3.2 Mixing signed and unsigned types
When mixed signed and unsigned types are compared, the value of the types are compared, instead of the actual bits that make up the variables.

3.3 schar1 + schar2
This is what I expected. Signed chars range from -128 to 127. Since schar1 is set to 0xFF (255), it is fine from 0 to 127, but wraps around after 127 to -128, and continues from there, ultimately resulting as -1. Similarly, schar2 will wrap around to -2. Thus the result -1 + (-2) = -3.

3.4 uchar1 + uchar2
This was NOT what I expected. I expected 254 since unsigned chars range from 0 to 255 and so it would cap, but digging around a little, it seems that there exists something known as integer promotions prior to the arithmetic operation going through, which means my unsigned chars become ints which are 4 bytes, with a huge range from -2147483648 to 2147483647. This would certainly allow the result to be a measly 509.

3.5 schar1 + uchar1
I expected this one. Despite my note of integer promotions previously, the values are still retained, so the operation carries out fine and predictably.


4. Booleans

4.1 Size of booleans
'Booleans' are 4 bytes.


5. Shifts

5.1 Shift shift_char left > 3 places AND > 7 places
When I shift shift_char left more than 3 places and/or more than 7 places, I end up doubling shift_char repeatedly. I would not have expected this, had I not known about integer promotions, which I found out above in part 3. If I did not know that shift_char would be promoted to an 4-byte int before being operated on, I would assume it remains a 1-byte char, resulting in shifts to the left greater than 3, to wrap back around, i.e., the range of shift_char would be from -128 to 127, and shifts to the left greater than 7, to repeat the same pattern of 'shifting results' I had seen previously, as 1 byte = 8 bits and I would have essentially shifted back to the start, where shift_char = 15.


6. Pointer basics

6.1 Printing pointer values
When you print the pointer values themselves, you end up printing the address that the pointer is pointing to. You may want to use %x instead of %d because addresses in hex are easier to trace when you are debugging memory errors, or if you just want more readable address in general.

6.2 Difference between ip and ip+1
The difference between ip and ip+1 is not 1 because it depends on the system architecture. Since a 64-bit architecture is used here, the pointer is 8 bytes = 64 bits.


8. Strings

8.1 Value after last character
The value of the byte after the last character is 0. This is the null byte/null-terminating byte/null char, which signifies the end of the string.

8.2 Add 60 to null byte
Adding 60 to the byte following the last character in the string, the null byte, makes it no longer a null byte, and instead, the 'less than' character, '<'. Since it is no longer the null byte, the string will include the less than character. Also, since there is no longer a null byte, the string will continue until it hits a null (in the contiguous memory, as a string is just a character array, and arrays can be assumed to be contiguous).